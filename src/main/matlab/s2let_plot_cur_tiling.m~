function s2let_plot_cur_tiling(B, L, J_min, varargin)
% plot_cur_tiling - Plot the tiling of scaling function and curvelets in harmonic space.
%
% Default usage :
%
%   s2let_plot_cur_tiling(B, L, J_min, <options>)
%
% B is the curvelet dilation parameter,
% L is the angular band-limit,
% J_min the first wavelet to be used.
%
% % Valid options include:
%
%  'Spin'        = { Spin; (default=0) }
%  'SpinLowered' = { true  [Apply normalisation factors for spin-lowered
%                           wavelets and scaling function.],
%                    false [Apply the usual normalisation factors such
%                           that the wavelets fulfil the admissibility
%                           condition (default)]}
%  'SpinLoweredFrom' = [integer; if the SpinLowered option is used, this
%                       option indicates which spin number the wavelets
%                       should be lowered from (default = 0)]
%
% S2LET package to perform Wavelet transform on the Sphere.
% Copyright (C) 2012  Boris Leistedt & Jason McEwen
% See LICENSE.txt for license details

% Parse arguments.
p = inputParser;
p.addRequired('B', @isnumeric);
p.addRequired('L', @isnumeric);
p.addRequired('J_min', @isnumeric);
p.addParamValue('Spin', 0, @isnumeric);
p.addParamValue('SpinLowered', false, @islogical);
p.addParamValue('SpinLoweredFrom', 0, @isnumeric);
p.parse(B, L, J_min, varargin{:});

args = p.Results;


B = args.B;
L = args.L;
J_min = args.J_min;
Spin = args.Spin;
N = L; 


% Tile curvelet and the scaling functions: 
[cur_lm scal_l] = s2let_curvelet_tiling(B, L, J_min);

J = s2let_jmax(L, B);
xi = 0:0.01:L-1;
x = 0:L-1;

%
% Plot the scaling function: 
%
kappa0 = zeros(1,L);
for l = 0:L-1
 kappa0(1,l+1) = scal_l(l^2+l+1,1);
end

kappa = zeros(J+1,L);
for j = J_min:J
 for l = 0:L-1
  kappa(j+1,l+1) = cur_lm{j-J_min+1}(1,l^2+l+m+1);
 end
end 



figure('Position',[100 100 900 450])
  %semilogx(0:L-1, kappa0, 'k', 'LineWidth', 2);
yi = interp1(x, kappa0, xi,'pchip');
semilogx(xi, yi, 'k', 'LineWidth', 2);
  %h = text(2, 1.07, 'k0', 'Color', [0 0 0]);
hold on;
for j = J_min:J
  colour = rand(1,3)*0.9;
  %plot(0:L-1, kappa(j+1,:), 'LineWidth', 2, 'Color', colour);
 %    yi = interp1(x,kappa(j+1,:),xi,'pchip');
    yi = interp1(x,kappa(j+1,:),xi,'pchip');
    plot(xi, yi, 'LineWidth', 2, 'Color', colour);
  %h = text(B.^j, 1.07, strcat('j',num2str(j+1)), 'Color', colour);
%
%% Directional Wavelet - load('kappas_s2dw'):
%% yi = interp1(x, kappa_s2dw(j+1,:), xi,'pchip');
%% plot(xi, yi, '-k', 'LineWidth', 2)%, 'Color', colour);
%
end
%title('Harmonic tiling');
%xlabel('el');
axis([0 L -0.05 1.15]);
set(gca,'XTick',2.^[0:(J+2)]);


nx = 1;
ny = 3;
[thetas, phis, n, ntheta, nphi] = ssht_sampling(L);
figure('Position',[100 100 900 200]) 
h = subplot(nx, ny, 1);
f = ssht_inverse(kappa0, L, 'Reality', true);
plot(thetas, f(:,1), '-k', 'LineWidth', 2)
mx = 1.1*max(f(:,1));
axis([0 3. -mx/8 mx ]) 


%
% Plot the curvelet kernels:  
%
Jmax = 3;
for j = J_min:Jmax
   h = subplot(nx, ny, j-J_min+2);
   hold on
   f = ssht_inverse(cur_lm{j-J_min+1}(:), L, 'Reality', true);
   plot(thetas, f(:,1), '-k', 'LineWidth', 2) 
   mx = 1.1*max(f(:,1));
   axis([0 3. -mx/7 mx ])
end 


end
